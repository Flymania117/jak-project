import json
import os
import collections

def process_text_translations(game_name):
  with open("./localization/{}/text/meta.json".format(game_name), 'r', encoding="utf-8") as f:
    meta = json.load(f)

  for gs_file_name, info in meta.items():
    # NOTE - ignoring most of the meta, as we just append to the `.gs` files
    # so the header and such is assumed to be correct

    # Build up the file
    language_ids = []
    # output_lines = [
    #   "(group-name \"{}\")\n".format(info["group-name"]),
    # ]
    output_lines = []
    translations = []
    for language in info["languages"]:
      for lang_code, lang_info in language.items():
        language_ids.append(str(lang_info["id"]))
        file_name = "./localization/{}/text/text_{}.json".format(game_name, lang_code)
        with open(file_name, 'r', encoding="utf-8") as f:
          translations.append(json.load(f))
    # output_lines.append("(language-id {})\n".format(" ".join(language_ids)))
    # output_lines.append("(text-version {})\n".format(info["version"]))

    # build up translated strings
    # NOTE - the assumption is that a multi-language file will each have the same strings
    text_ids = translations[0].keys().sort()
    for text_id in text_ids:
      if len(translations) == 0:
        output_lines.append("(#x{} \"{}\")\n".format(text_id, translations[0][text_id]["text"]))
      else:
        output_lines.append("(#x{} \"{}\"".format(text_id, translations[0][text_id]["text"]))
        for translation in translations[1:]:
          output_lines.append("\n        \"{}\"".format(translation[text_id]["text"]))
        output_lines.append(")\n")

    # read in the existing content from the file
    output_path = "./game/assets/{}/text/{}.gs".format(game_name, gs_file_name)
    with open(output_path, 'r', encoding="utf-8") as f:
      existing_lines = f.readlines()

    with open(output_path, "w", encoding="utf-8") as f:
      for line in existing_lines:
        if "AUTOGENERATED STRINGS BELOW" in line:
          f.write(line)
          break
        f.write(line)
      f.write("\n")
      for line in output_lines:
        f.write(line)
      f.write("\n")
