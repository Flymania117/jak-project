;;-*-Lisp-*-
(in-package goal)

;; name: level-h.gc
;; name in dgo: level-h
;; dgos: ENGINE, GAME

(declare-type bsp-header basic)
(declare-type drawable basic)
(declare-type entity-links structure)

(defenum vis-info-flag
  :type uint32
  :bitfield #t
  (dummy0  0)
  (dummy1  1)
  (dummy2  2)
  (dummy3  3)
  (dummy4  4)
  (dummy5  5)
  (dummy6  6)
  (dummy7  7)
  (dummy8  8)
  (dummy9  9)
  (dummy10 10)
  (dummy11 11)
  (dummy12 12)
  (dummy13 13)
  (dummy14 14)
  (dummy15 15)
  (dummy16 16)
  (dummy17 17)
  (dummy18 18)
  (dummy19 19)
  (dummy20 20)
  (dummy21 21)
  (dummy22 22)
  (dummy23 23)
  (dummy24 24)
  (dummy25 25)
  (dummy26 26)
  (dummy27 27)
  (dummy28 28)
  (in-iop  29)
  (loading 30)
  (vis-valid 31)
  )

(defenum task-mask
  :type uint32
  :bitfield #t
  (task0    0) ;; 0x1
  (task1    1) ;; 0x2
  (task2    2) ;; 0x4
  (task3    3) ;; 0x8
  (task4    4) ;; 0x10
  (task5    5) ;; 0x20
  (task6    6) ;; 0x40
  (task7    7) ;; 0x80
  (done     8) ;; 0x100
  (dummy0   9) ;; 0x200
  (dummy1   10) ;; 0x400
  (dummy2   11) ;; 0x800
  (special  12) ;; 0x1000
  (primary0 13) ;; 0x2000
  (ctywide  14) ;; 0x4000
  (never    15) ;; 0x8000
  (movie0   16) ;; 0x10000
  (movie1   17) ;; 0x20000
  (movie2   18) ;; 0x40000
  )

(deftype level-vis-info (basic)
  ((level              level                  :offset-assert   4)
   (from-level         level                  :offset-assert   8)
   (from-bsp           bsp-header             :offset-assert  12)
   (flags              vis-info-flag          :offset-assert  16)
   (length             uint32                 :offset-assert  20)
   (allocated-length   uint32                 :offset-assert  24)
   (dictionary-length  uint32                 :offset-assert  28)
   (dictionary         uint32                 :offset-assert  32)
   (string-block       uint32                 :offset-assert  36)
   (ramdisk            uint32                 :offset-assert  40)
   (vis-bits           uint32                 :offset-assert  44)
   (current-vis-string uint32                 :offset-assert  48)
   (vis-string         uint32        :dynamic :offset-assert  52)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(defmethod asize-of level-vis-info ((obj level-vis-info))
  (the-as int (+ (-> level-vis-info size) (-> obj dictionary-length)))
  )

(deftype level-load-info (basic)
  ((name-list               string     6       :offset-assert   4)
   (index                   int16              :offset-assert  28)
   (task-level              uint8              :offset-assert  30)
   (name                    string             :offset          4)
   (visname                 string             :offset          8)
   (nickname                string             :offset         12)
   (dbname                  string             :offset         16)
   (taskname                string             :offset         20)
   (packages                pair               :offset-assert  32)
   (memory-mode             uint32             :offset-assert  36)
   (music-bank              basic              :offset-assert  40)
   (ambient-sounds          basic              :offset-assert  44)
   (sound-reverb            float              :offset-assert  48)
   (mood-func               basic              :offset-assert  52)
   (mood-init               basic              :offset-assert  56)
   (ocean                   basic              :offset-assert  60)
   (sky                     basic              :offset-assert  64)
   (use-camera-other        basic              :offset-assert  68)
   (part-engine-max         int32              :offset-assert  72)
   (city-map-bits           uint64             :offset-assert  80)
   (continues               basic              :offset-assert  88)
   (tasks                   basic              :offset-assert  92)
   (priority                int32              :offset-assert  96)
   (load-commands           basic              :offset-assert 100)
   (alt-load-commands       basic              :offset-assert 104)
   (bsp-mask                uint64             :offset-assert 112)
   (buzzer                  int32              :offset-assert 120)
   (buttom-height           meters             :offset-assert 124)
   (run-packages            basic              :offset-assert 128)
   (prev-level              basic              :offset-assert 132)
   (next-level              basic              :offset-assert 136)
   (wait-for-load           symbol             :offset-assert 140)
   (login-func              basic              :offset-assert 144)
   (activate-func           basic              :offset-assert 148)
   (deactivate-func         basic              :offset-assert 152)
   (kill-func               basic              :offset-assert 156)
   (borrow-size             uint16     2       :offset-assert 160)
   (borrow-level            symbol     2       :offset-assert 164)
   (borrow-display?         basic      2       :offset-assert 172)
   (base-task-mask          task-mask          :offset-assert 180)
   (texture-anim            basic      10      :offset-assert 184)
   (texture-anim-tfrag      basic              :offset        184)
   (texture-anim-pris       basic              :offset        188)
   (texture-anim-shrub      basic              :offset        192)
   (texture-anim-alpha      basic              :offset        196)
   (texture-anim-water      basic              :offset        200)
   (texture-anim-twarp      basic              :offset        204)
   (texture-anim-pris2      basic              :offset        208)
   (texture-anim-sprite     basic              :offset        212)
   (texture-anim-map        basic              :offset        216)
   (texture-anim-sky        basic              :offset        220)
   (draw-priority           float              :offset-assert 224)
   (level-flags             uint32             :offset-assert 228)
   (fog-height              float              :offset-assert 232)
   (bigmap-id               uint32             :offset-assert 236)
   (ocean-near-translucent? symbol             :offset-assert 240)
   (ocean-far?              symbol             :offset-assert 244)
   (mood-range              mood-range :inline :offset-assert 256)
   (max-rain                float              :offset-assert 272)
   (fog-mult                float              :offset-assert 276)
   (ocean-alpha             float              :offset-assert 280)
   (extra-sound-bank        basic              :offset-assert 284)
   )
  :method-count-assert 9
  :size-assert         #x120
  :flag-assert         #x900000120
  )

(deftype login-state (basic)
  ((state int32       :offset-assert   4)
   (pos   uint32      :offset-assert   8)
   (elts  uint32      :offset-assert  12)
   (elt   drawable 16 :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype level (basic)
  ((name                      symbol                        :offset-assert   4)
   (load-name                 basic                         :offset-assert   8)
   (nickname                  basic                         :offset-assert  12)
   (index                     int32                         :offset-assert  16)
   (status                    symbol                        :offset-assert  20)
   (borrow-level              basic              2          :offset-assert  24)
   (borrow-from-level         basic                         :offset-assert  32)
   (heap                      kheap              :inline    :offset-assert  48)
   (borrow-heap               kheap              2 :inline  :offset-assert  64)
   (bsp                       bsp-header                    :offset-assert  96)
   (art-group                 basic                         :offset-assert 100)
   (info                      basic                         :offset-assert 104)
   (texture-page              texture-page       18         :offset-assert 108)
   (loaded-texture-page       texture-page       16         :offset-assert 180)
   (loaded-texture-page-count int32                         :offset-assert 244)
   (entity                    basic                         :offset-assert 248)
   (closest-object            float                         :offset-assert 252)
   (upload-size               int32              18         :offset        324)
   (inside-boxes              symbol                        :offset-assert 396)
   (display?                  symbol                        :offset-assert 400)
   (render?                   symbol                        :offset-assert 404)
   (meta-inside?              symbol                        :offset-assert 408)
   (force-inside?             symbol                        :offset-assert 412)
   (mood-context              mood-context       :inline    :offset-assert 416)
   (mood-func                 basic                         :offset-assert 2384)
   (mood-init                 basic                         :offset-assert 2388)
   (vis-bits                  pointer                       :offset-assert 2392)
   (all-visible?              symbol                        :offset-assert 2396)
   (force-all-visible?        symbol                        :offset-assert 2400)
   (linking                   basic                         :offset-assert 2404)
   (vis-info                  level-vis-info     8          :offset-assert 2408)
   (vis-self-index            int32                         :offset-assert 2440)
   (vis-adj-index             int32                         :offset-assert 2444)
   (vis-buffer                uint8              2048       :offset-assert 2448)
   (mem-usage-block           basic                         :offset-assert 4496)
   (mem-usage                 int32                         :offset-assert 4500)
   (code-memory-start         pointer                       :offset-assert 4504)
   (code-memory-end           pointer                       :offset-assert 4508)
   (load-start-time           time-frame                    :offset-assert 4512)
   (load-stop-time            time-frame                    :offset-assert 4520)
   (load-buffer               basic              2          :offset-assert 4528)
   (load-buffer-size          uint32                        :offset-assert 4536)
   (load-buffer-last          uint32                        :offset-assert 4540)
   (load-buffer-mode          uint32                        :offset-assert 4544)
   (display-start-time        time-frame                    :offset-assert 4552)
   (memory-mask               uint32                        :offset-assert 4560)
   (task-mask                 task-mask                     :offset-assert 4564)
   (tfrag-gs-test             uint64                        :offset-assert 4568)
   (texture-dirty-masks       texture-mask       10 :inline :offset-assert 4576)
   (texture-mask              texture-mask       18 :inline :offset-assert 4736)
   (sky-mask                  texture-mask       :inline    :offset-assert 5024)
   (tfrag-masks               basic                         :offset-assert 5040)
   (tfrag-dists               pointer                       :offset-assert 5044)
   (shrub-masks               basic                         :offset-assert 5048)
   (shrub-dists               pointer                       :offset-assert 5052)
   (alpha-masks               basic                         :offset-assert 5056)
   (alpha-dists               pointer                       :offset-assert 5060)
   (water-masks               basic                         :offset-assert 5064)
   (water-dists               pointer                       :offset-assert 5068)
   (tfrag-last-calls          int32              6          :offset-assert 5072)
   (texture-anim-array        texture-anim-array 10         :offset-assert 5096)
   (light-hash                basic                         :offset-assert 5136)
   (draw-priority             float                         :offset-assert 5140)
   (draw-index                int32                         :offset-assert 5144)
   (part-engine               basic                         :offset-assert 5148)
   (user-object               basic              4          :offset-assert 5152)
   (loaded-text-info-count    int32                         :offset-assert 5168)
   (loaded-text-info          object             8          :offset-assert 5172)
   (level-type                basic                         :offset-assert 5204)
   (load-order                int64                         :offset-assert 5208)
   (pad                       int8               12         :offset-assert 5216)
   )
  :method-count-assert 30
  :size-assert         #x146c
  :flag-assert         #x1e0000146c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    )
  )

(deftype level-group (basic)
  ((length            int32                  :offset-assert   4)
   (log-in-level-bsp  bsp-header             :offset-assert   8)
   (loading-level     level                  :offset-assert  12)
   (entity-link       entity-links           :offset         16)
   (border?           symbol                 :offset-assert  20)
   (vis?              symbol                 :offset-assert  24)
   (want-level        basic                  :offset-assert  28)
   (receiving-level   basic                  :offset-assert  32)
   (load-commands     basic                  :offset-assert  36)
   (play?             symbol                 :offset-assert  40)
   (target-pos        vector       2 :inline :offset-assert  48)
   (camera-pos        vector       2 :inline :offset-assert  80)
   (heap              kheap        :inline   :offset-assert 112)
   (sound-bank        basic        4         :offset-assert 128)
   (disk-load-timing? symbol                 :offset-assert 144)
   (load-level        basic                  :offset-assert 148)
   (load-size         uint32                 :offset-assert 152)
   (load-time         float                  :offset-assert 156)
   (load-login-time   float                  :offset-assert 160)
   (draw-level-count  int32                  :offset-assert 164)
   (draw-level        basic        7         :offset-assert 168)
   (draw-index-map    uint8        7         :offset-assert 196)
   (load-order        uint64                 :offset-assert 208)
   (pad               uint8        30        :offset-assert 216)
   (level             level        7 :inline :offset-assert 256)
   (level0            level        :inline   :offset        256)
   (level1            level        :inline   :offset        5488)
   (level2            level        :inline   :offset        10720)
   (level3            level        :inline   :offset        15952)
   (level4            level        :inline   :offset        21184)
   (level5            level        :inline   :offset        26416)
   (default-level     level        :inline   :offset        31648)
   (pad2              uint8        4         :offset-assert 36880)
   )
  :method-count-assert 31
  :size-assert         #x9014
  :flag-assert         #x1f00009014
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    (dummy-30 () none 30)
    )
  )

(defmethod inspect level-group ((obj level-group))
  (when (not obj)
    (set! obj obj)
    (goto cfg-13)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tentity-link: ~`entity-links`P~%" (-> obj entity-link))
  (format #t "~1Tborder?: ~A~%" (-> obj border?))
  (format #t "~1Tvis?: ~A~%" (-> obj vis?))
  (format #t "~1Twant-level: ~A~%" (-> obj want-level))
  (format #t "~1Treceiving-level: ~A~%" (-> obj receiving-level))
  (format #t "~1Tload-commands: ~A~%" (-> obj load-commands))
  (format #t "~1Tplay?: ~A~%" (-> obj play?))
  (format #t "~1Ttarget-pos[2] @ #x~X~%" (-> obj target-pos))
  (dotimes (s5-0 2)
    (format #t "~T  [~D]~1Ttarget-pos: ~`vector`P~%" s5-0 (-> obj target-pos s5-0))
    )
  (format #t "~1Tcamera-pos[2] @ #x~X~%" (-> obj camera-pos))
  (dotimes (s5-1 2)
    (format #t "~T  [~D]~1Tcamera-pos: ~`vector`P~%" s5-1 (-> obj camera-pos s5-1))
    )
  (format #t "~1Theap: #<kheap @ #x~X>~%" (-> obj heap))
  (format #t "~1Tsound-bank[4] @ #x~X~%" (-> obj sound-bank))
  (format #t "~1Tdisk-load-timing?: ~A~%" (-> obj disk-load-timing?))
  (format #t "~1Tload-level: ~A~%" (-> obj load-level))
  (format #t "~1Tload-size: ~D~%" (-> obj load-size))
  (format #t "~1Tload-time: ~f~%" (-> obj load-time))
  (format #t "~1Tload-login-time: ~f~%" (-> obj load-login-time))
  (format #t "~1Tdraw-level-count: ~D~%" (-> obj draw-level-count))
  (format #t "~1Tdraw-level[7] @ #x~X~%" (-> obj draw-level))
  (dotimes (s5-2 (-> obj draw-level-count))
    (format #t "~T  [~D]~1Tdraw-level: ~`object`P~%" s5-2 (-> obj draw-level s5-2))
    )
  (format #t "~1Tdraw-index-map[7] @ #x~X~%" (-> obj draw-index-map))
  (format #t "~1Tload-order: ~D~%" (-> obj load-order))
  (format #t "~1Tlevel[7] @ #x~X~%" (-> obj level))
  (format #t "~1Tdata[7] @ #x~X~%" (-> obj level))
  (format #t "~1Tlevel0: ~`level`P~%" (-> obj level))
  (format #t "~1Tlevel1: ~`level`P~%" (-> obj level1))
  (format #t "~1Tlevel2: ~`level`P~%" (-> obj level2))
  (format #t "~1Tlevel3: ~`level`P~%" (-> obj level3))
  (format #t "~1Tlevel4: ~`level`P~%" (-> obj level4))
  (format #t "~1Tlevel5: ~`level`P~%" (-> obj level5))
  (format #t "~1Tlevel-default: ~`level`P~%" (-> obj default-level))
  (label cfg-13)
  obj
  )

(define-extern *level* level-group)
(when (zero? *level*)
  (define *level* (new 'static 'level-group
                  :length 6
                  :log-in-level-bsp #f
                  :loading-level #f
                  :entity-link #f
                  :border? #f
                  :vis? #f
                  :want-level #f
                  :load-commands '()
                  :play? #f
                  :sound-bank (new 'static 'array basic 4 #f #f #f #f)
                  :disk-load-timing? #f
                  :level (new 'static 'inline-array level 7
                    (new 'static 'level
                      :name #f
                      :status 'inactive
                      :borrow-level (new 'static 'array basic 2 #f #f)
                      :borrow-from-level #f
                      :inside-boxes #f
                      :force-inside? #f
                      :linking #f
                      :level-type #f
                      )
                    (new 'static 'level
                      :name #f
                      :index 1
                      :status 'inactive
                      :borrow-level (new 'static 'array basic 2 #f #f)
                      :borrow-from-level #f
                      :inside-boxes #f
                      :force-inside? #f
                      :linking #f
                      :level-type #f
                      )
                    (new 'static 'level
                      :name #f
                      :index 2
                      :status 'inactive
                      :borrow-level (new 'static 'array basic 2 #f #f)
                      :borrow-from-level #f
                      :inside-boxes #f
                      :force-inside? #f
                      :linking #f
                      :level-type #f
                      )
                    (new 'static 'level
                      :name #f
                      :index 3
                      :status 'inactive
                      :borrow-level (new 'static 'array basic 2 #f #f)
                      :borrow-from-level #f
                      :inside-boxes #f
                      :force-inside? #f
                      :linking #f
                      :level-type #f
                      )
                    (new 'static 'level
                      :name #f
                      :index 4
                      :status 'inactive
                      :borrow-level (new 'static 'array basic 2 #f #f)
                      :borrow-from-level #f
                      :inside-boxes #f
                      :force-inside? #f
                      :linking #f
                      :level-type #f
                      )
                    (new 'static 'level
                      :name #f
                      :index 5
                      :status 'inactive
                      :borrow-level (new 'static 'array basic 2 #f #f)
                      :borrow-from-level #f
                      :inside-boxes #f
                      :force-inside? #f
                      :linking #f
                      :level-type #f
                      )
                    (new 'static 'level
                      :name 'default
                      :index 6
                      :status 'reserved
                      :borrow-level (new 'static 'array basic 2 #f #f)
                      :borrow-from-level #f
                      :bsp #f
                      :inside-boxes #f
                      :display? #f
                      :force-inside? #f
                      :linking #f
                      :level-type #f
                      )
                    )
                  )
        )

  0
  )
(define *draw-index* 0)
(define *level-index* 0)



