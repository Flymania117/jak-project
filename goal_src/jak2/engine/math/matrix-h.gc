;;-*-Lisp-*-
(in-package goal)

;; name: matrix-h.gc
;; name in dgo: matrix-h
;; dgos: ENGINE, GAME

(deftype matrix (structure)
  ((data   float   16      :offset-assert   0)
   (vector vector  4       :offset          0)
   (quad   uint128 4       :offset          0)
   (trans  vector  :inline :offset         48)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (transform-vectors! (_type_ (inline-array vector) (inline-array vector) int) none 9)
    )
  )

(deftype matrix3 (structure)
  ((data   float   12 :offset-assert   0)
   (vector vector  3  :offset          0)
   (quad   uint128 3  :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype matrix4h (structure)
  ((data     int16    16 :offset-assert   0)
   (vector4h vector4h 4  :offset          0)
   (long     int64    4  :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(defun matrix-copy! ((arg0 matrix) (arg1 matrix))
  (let ((v1-0 (-> arg1 quad 0))
        (a2-0 (-> arg1 quad 1))
        (a3-0 (-> arg1 quad 2))
        (a1-1 (-> arg1 trans quad))
        )
    (set! (-> arg0 quad 0) v1-0)
    (set! (-> arg0 quad 1) a2-0)
    (set! (-> arg0 quad 2) a3-0)
    (set! (-> arg0 trans quad) a1-1)
    )
  arg0
  )

(defmacro new-stack-matrix0 ()
  "Get a new matrix on the stack that's set to zero."
  `(let ((mat (new 'stack-no-clear 'matrix)))
     (set! (-> mat quad 0) (the-as uint128 0))
     (set! (-> mat quad 1) (the-as uint128 0))
     (set! (-> mat quad 2) (the-as uint128 0))
     (set! (-> mat quad 3) (the-as uint128 0))
     mat
     )
  )